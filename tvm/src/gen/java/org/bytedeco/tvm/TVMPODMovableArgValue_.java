// Targeted by JavaCPP version 1.5.11: DO NOT EDIT THIS FILE

package org.bytedeco.tvm;

import org.bytedeco.tvm.Module;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.opencl.*;
import static org.bytedeco.opencl.global.OpenCL.*;
import org.bytedeco.dnnl.*;
import static org.bytedeco.dnnl.global.dnnl.*;
import org.bytedeco.llvm.LLVM.*;
import static org.bytedeco.llvm.global.LLVM.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.tvm.global.tvm_runtime.*;

@Name("tvm::runtime::TVMPODValue_CRTP_<tvm::runtime::TVMMovableArgValue_>") @Properties(inherit = org.bytedeco.tvm.presets.tvm_runtime.class)
public class TVMPODMovableArgValue_ extends TVMPODValue_ {
    static { Loader.load(); }
    /** Default native constructor. */
    public TVMPODMovableArgValue_() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public TVMPODMovableArgValue_(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TVMPODMovableArgValue_(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public TVMPODMovableArgValue_ position(long position) {
        return (TVMPODMovableArgValue_)super.position(position);
    }
    @Override public TVMPODMovableArgValue_ getPointer(long i) {
        return new TVMPODMovableArgValue_((Pointer)this).offsetAddress(i);
    }


  // ObjectRef handling

  public native @Name("operator double") double asDouble();
  public native @Cast("int64_t") @Name("operator int64_t") long asLong();
  public native @Name("operator int") int asInt();
  public native @Cast("bool") @Name("operator bool") boolean asBoolean();
}
